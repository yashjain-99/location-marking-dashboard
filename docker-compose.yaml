version: "3.9"

services:
  db:
    image: postgres:13-alpine
    volumes:
      - dev-db-data:/var/lib/postgresql/data
    environment:
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 5s
      timeout: 5s
      retries: 10
    networks:
      - keycloak_network

  keycloak:
    image: quay.io/keycloak/keycloak:23.0.6
    command: start-dev
    environment:
      KC_HOSTNAME: localhost
      KC_HOSTNAME_PORT: ${KC_PORT}
      KC_HOSTNAME_STRICT_BACKCHANNEL: false
      KC_HTTP_ENABLED: true
      KC_HOSTNAME_STRICT_HTTPS: false
      KC_HEALTH_ENABLED: true
      KEYCLOAK_ADMIN: ${KC_ADMIN}
      KEYCLOAK_ADMIN_PASSWORD: ${KC_ADMIN_PASSWORD}
      KC_DB: postgres
      KC_DB_URL: jdbc:postgresql://db:5432/${POSTGRES_DB}?currentSchema=${KC_SCHEMA}
      KC_DB_USERNAME: ${POSTGRES_USER}
      KC_DB_PASSWORD: ${POSTGRES_PASSWORD}
    ports:
      - ${KC_PORT}:${KC_PORT}
    depends_on:
      db:
        condition: service_healthy
    networks:
      - keycloak_network

  api:
    build:
      context: ./api
      dockerfile: Dockerfile
    container_name: api
    ports:
      - "${API_PORT}:${API_PORT}"
    volumes:
      - ./api:/app
    environment:
      PORT: ${API_PORT}
      DB_HOST: db
      DB_USER: ${POSTGRES_USER}
      DB_PASSWORD: ${POSTGRES_PASSWORD}
      DB_NAME: ${POSTGRES_DB}
      KEYCLOAK_URL: http://keycloak:${KC_PORT}
      POSTGRES_DATABASE_URL: ${API_POSTGRES_DATABASE_URL}
      KC_PUBLIC_KEY: ${API_KC_PUBLIC_KEY}
    depends_on:
      db:
        condition: service_healthy
      keycloak:
        condition: service_started
    networks:
      - keycloak_network

volumes:
  dev-db-data:

networks:
  keycloak_network:
    driver: bridge
